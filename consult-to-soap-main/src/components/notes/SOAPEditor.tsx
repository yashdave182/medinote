import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Save, FileText, Download, Edit3, Sparkles } from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';

interface SOAPNote {
  subjective: string;
  objective: string;
  assessment: string;
  plan: string;
  raw_transcript: string;
  extracted_entities: any;
}

interface SOAPEditorProps {
  note: SOAPNote;
  onSave: (note: SOAPNote) => Promise<void>;
  isEditing: boolean;
  onEditToggle: () => void;
  loading?: boolean;
}

export const SOAPEditor: React.FC<SOAPEditorProps> = ({
  note,
  onSave,
  isEditing,
  onEditToggle,
  loading = false,
}) => {
  const [editableNote, setEditableNote] = useState<SOAPNote>(note);
  const [saving, setSaving] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    setEditableNote(note);
  }, [note]);

  const handleSave = async () => {
    setSaving(true);
    try {
      await onSave(editableNote);
      onEditToggle();
      toast({
        title: "Note Saved",
        description: "SOAP note has been successfully saved.",
      });
    } catch (error) {
      toast({
        title: "Save Error",
        description: "Failed to save note. Please try again.",
        variant: "destructive",
      });
    } finally {
      setSaving(false);
    }
  };

  const handleExportPDF = () => {
    // Create a formatted text version for export
    const noteContent = `
MEDICAL CONSULTATION NOTE

SUBJECTIVE:
${editableNote.subjective}

OBJECTIVE:
${editableNote.objective}

ASSESSMENT:
${editableNote.assessment}

PLAN:
${editableNote.plan}

Generated by MediNote AI
Date: ${new Date().toLocaleDateString()}
    `.trim();

    const blob = new Blob([noteContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `medical-note-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Note Exported",
      description: "Medical note has been downloaded.",
    });
  };

  const renderEntityBadges = (entities: any) => {
    if (!entities || typeof entities !== 'object') return null;

    return (
      <div className="space-y-3">
        {entities.symptoms && entities.symptoms.length > 0 && (
          <div>
            <h4 className="text-sm font-medium mb-2">Symptoms</h4>
            <div className="flex flex-wrap gap-2">
              {entities.symptoms.map((symptom: string, index: number) => (
                <Badge key={index} variant="secondary" className="bg-red-50 text-red-700 border-red-200">
                  {symptom}
                </Badge>
              ))}
            </div>
          </div>
        )}
        
        {entities.medications && entities.medications.length > 0 && (
          <div>
            <h4 className="text-sm font-medium mb-2">Medications</h4>
            <div className="flex flex-wrap gap-2">
              {entities.medications.map((med: string, index: number) => (
                <Badge key={index} variant="secondary" className="bg-blue-50 text-blue-700 border-blue-200">
                  {med}
                </Badge>
              ))}
            </div>
          </div>
        )}

        {entities.conditions && entities.conditions.length > 0 && (
          <div>
            <h4 className="text-sm font-medium mb-2">Conditions</h4>
            <div className="flex flex-wrap gap-2">
              {entities.conditions.map((condition: string, index: number) => (
                <Badge key={index} variant="secondary" className="bg-green-50 text-green-700 border-green-200">
                  {condition}
                </Badge>
              ))}
            </div>
          </div>
        )}
      </div>
    );
  };

  if (loading) {
    return (
      <Card>
        <CardContent className="p-8 text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Generating SOAP note...</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <FileText className="h-6 w-6 text-primary" />
          <div>
            <h2 className="text-2xl font-bold">SOAP Note</h2>
            <p className="text-sm text-muted-foreground">
              Structured medical documentation
            </p>
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <Button variant="outline" onClick={handleExportPDF}>
            <Download className="h-4 w-4 mr-2" />
            Export
          </Button>
          <Button
            variant={isEditing ? "default" : "outline"}
            onClick={isEditing ? handleSave : onEditToggle}
            disabled={saving}
          >
            {isEditing ? (
              <>
                <Save className="h-4 w-4 mr-2" />
                {saving ? 'Saving...' : 'Save'}
              </>
            ) : (
              <>
                <Edit3 className="h-4 w-4 mr-2" />
                Edit
              </>
            )}
          </Button>
        </div>
      </div>

      <Tabs defaultValue="soap" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="soap">SOAP Note</TabsTrigger>
          <TabsTrigger value="entities">Medical Entities</TabsTrigger>
          <TabsTrigger value="transcript">Raw Transcript</TabsTrigger>
        </TabsList>

        <TabsContent value="soap" className="space-y-6">
          {/* Subjective */}
          <Card className="soap-section">
            <CardHeader>
              <CardTitle className="text-lg text-primary">Subjective</CardTitle>
              <CardDescription>
                Patient's reported symptoms, concerns, and medical history
              </CardDescription>
            </CardHeader>
            <CardContent>
              {isEditing ? (
                <Textarea
                  value={editableNote.subjective}
                  onChange={(e) => setEditableNote(prev => ({ ...prev, subjective: e.target.value }))}
                  placeholder="Patient reports..."
                  className="min-h-[120px]"
                />
              ) : (
                <p className="whitespace-pre-wrap text-sm leading-relaxed">
                  {editableNote.subjective || 'No subjective information recorded.'}
                </p>
              )}
            </CardContent>
          </Card>

          {/* Objective */}
          <Card className="soap-section">
            <CardHeader>
              <CardTitle className="text-lg text-primary">Objective</CardTitle>
              <CardDescription>
                Observable findings, vital signs, and examination results
              </CardDescription>
            </CardHeader>
            <CardContent>
              {isEditing ? (
                <Textarea
                  value={editableNote.objective}
                  onChange={(e) => setEditableNote(prev => ({ ...prev, objective: e.target.value }))}
                  placeholder="Physical examination reveals..."
                  className="min-h-[120px]"
                />
              ) : (
                <p className="whitespace-pre-wrap text-sm leading-relaxed">
                  {editableNote.objective || 'No objective findings recorded.'}
                </p>
              )}
            </CardContent>
          </Card>

          {/* Assessment */}
          <Card className="soap-section">
            <CardHeader>
              <CardTitle className="text-lg text-primary">Assessment</CardTitle>
              <CardDescription>
                Diagnosis, differential diagnosis, and clinical impression
              </CardDescription>
            </CardHeader>
            <CardContent>
              {isEditing ? (
                <Textarea
                  value={editableNote.assessment}
                  onChange={(e) => setEditableNote(prev => ({ ...prev, assessment: e.target.value }))}
                  placeholder="Clinical assessment and diagnosis..."
                  className="min-h-[120px]"
                />
              ) : (
                <p className="whitespace-pre-wrap text-sm leading-relaxed">
                  {editableNote.assessment || 'No assessment recorded.'}
                </p>
              )}
            </CardContent>
          </Card>

          {/* Plan */}
          <Card className="soap-section">
            <CardHeader>
              <CardTitle className="text-lg text-primary">Plan</CardTitle>
              <CardDescription>
                Treatment plan, medications, follow-up instructions
              </CardDescription>
            </CardHeader>
            <CardContent>
              {isEditing ? (
                <Textarea
                  value={editableNote.plan}
                  onChange={(e) => setEditableNote(prev => ({ ...prev, plan: e.target.value }))}
                  placeholder="Treatment plan and recommendations..."
                  className="min-h-[120px]"
                />
              ) : (
                <p className="whitespace-pre-wrap text-sm leading-relaxed">
                  {editableNote.plan || 'No treatment plan recorded.'}
                </p>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="entities">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Sparkles className="h-5 w-5 text-accent" />
                <span>Extracted Medical Entities</span>
              </CardTitle>
              <CardDescription>
                Key medical information automatically identified from the conversation
              </CardDescription>
            </CardHeader>
            <CardContent>
              {renderEntityBadges(editableNote.extracted_entities) || (
                <p className="text-muted-foreground">No medical entities extracted.</p>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="transcript">
          <Card>
            <CardHeader>
              <CardTitle>Raw Transcript</CardTitle>
              <CardDescription>
                Complete conversation transcript from the consultation
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="bg-muted p-4 rounded-md">
                <p className="whitespace-pre-wrap text-sm leading-relaxed font-mono">
                  {editableNote.raw_transcript || 'No transcript available.'}
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};